name: HumHub Docker CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to production'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ github.repository_owner }}/humhub

jobs:
  lint:
    name: Lint Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Lint Dockerfiles
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: humhub/Dockerfile
          failure-threshold: error

      - name: Lint YAML files
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: .
          strict: false
          
      - name: Lint Shell scripts
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './backup/scripts'
          
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [lint, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      # Copy required scripts into correct directories
      - name: Set up required script files
        run: |
          # Create necessary directories
          mkdir -p humhub
          
          # Copy PHP.ini to humhub directory
          cat > humhub/php.ini << EOF
          [PHP]
          ; Security settings
          expose_php = Off
          max_execution_time = 120
          max_input_time = 120
          memory_limit = 256M
          error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
          display_errors = Off
          display_startup_errors = Off
          log_errors = On
          error_log = /proc/self/fd/2
          post_max_size = 32M
          file_uploads = On
          upload_max_filesize = 32M
          max_file_uploads = 20
          allow_url_fopen = On
          allow_url_include = Off
          default_socket_timeout = 60

          ; Date
          date.timezone = UTC

          ; Session
          session.cookie_httponly = 1
          session.use_strict_mode = 1
          session.use_cookies = 1
          session.use_only_cookies = 1
          session.cookie_secure = 1
          session.cookie_samesite = "Lax"
          session.gc_maxlifetime = 1440

          ; OpCache settings
          opcache.memory_consumption = 128
          opcache.interned_strings_buffer = 8
          opcache.max_accelerated_files = 4000
          opcache.revalidate_freq = 60
          opcache.fast_shutdown = 1
          opcache.enable_cli = 1

          ; Other settings
          realpath_cache_size = 4096k
          realpath_cache_ttl = 600
          disable_functions = exec,passthru,shell_exec,system,proc_open,popen,curl_multi_exec,parse_ini_file,show_source
          EOF
          
          # Copy wait-for-it script to humhub directory
          cp paste-4.txt humhub/wait-for-it.sh
          
          # Copy docker-entrypoint.sh to humhub directory
          cp paste-3.txt humhub/docker-entrypoint.sh

          # Create Dockerfile in humhub directory
          cat > humhub/Dockerfile << EOF
          FROM php:8.2-fpm

          ARG HUMHUB_VERSION=1.17.2

          # Install dependencies
          RUN apt-get update && apt-get install -y \
              libzip-dev \
              libfreetype6-dev \
              libjpeg62-turbo-dev \
              libpng-dev \
              libicu-dev \
              libldap2-dev \
              libxml2-dev \
              curl \
              wget \
              unzip \
              gnupg \
              git \
              libmagickwand-dev \
              --no-install-recommends && \
              rm -rf /var/lib/apt/lists/* && \
              # Install PHP extensions and PECL extensions
              docker-php-ext-configure gd --with-freetype --with-jpeg && \
              docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/ && \
              docker-php-ext-install -j"$(nproc)" \
              gd \
              intl \
              mysqli \
              pdo_mysql \
              zip \
              exif \
              opcache \
              ldap \
              xml && \
              pecl install imagick redis && \
              docker-php-ext-enable imagick redis

          # Set recommended PHP.ini settings
          COPY php.ini /usr/local/etc/php/conf.d/custom.ini

          # Copy wait-for-it script
          COPY wait-for-it.sh /usr/local/bin/wait-for-it
          # Copy entrypoint script
          COPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh

          # Make scripts executable
          RUN chmod +x /usr/local/bin/wait-for-it /usr/local/bin/docker-entrypoint.sh

          # Download and verify HumHub
          RUN curl -SL https://download.humhub.com/downloads/install/humhub-\${HUMHUB_VERSION}.zip -o humhub.zip && \
              unzip humhub.zip -d /tmp/ && \
              rm humhub.zip && \
              mv /tmp/humhub-* /var/www/html && \
              # Create health check script
              echo "<?php echo 'OK';" > /var/www/html/ping && \
              # Set directory permissions
              chmod -R 755 /var/www/html && \
              find /var/www/html -type f -exec chmod 644 {} \\; && \
              find /var/www/html -type d -exec chmod 755 {} \\; && \
              chmod -R 775 /var/www/html/protected/runtime /var/www/html/protected/modules /var/www/html/uploads /var/www/html/assets && \
              chown -R www-data:www-data /var/www/html && \
              # Clean up unneeded test dirs
              rm -rf /var/www/html/protected/vendor/bower-asset/*/test \
                    /var/www/html/protected/vendor/bower-asset/*/tests \
                    /var/www/html/protected/vendor/*/test \
                    /var/www/html/protected/vendor/*/tests \
                    /var/www/html/protected/runtime/logs/*

          # Create volume mount points
          VOLUME ["/var/www/html/protected/runtime", "/var/www/html/uploads", "/var/www/html/protected/modules", "/var/www/html/protected/config", "/var/www/html/themes"]

          # Set working directory
          WORKDIR /var/www/html

          # Set entrypoint and default command
          ENTRYPOINT ["docker-entrypoint.sh"]
          CMD ["php-fpm"]
          EOF
          
          # Create nginx directory and add docker-entrypoint.sh
          mkdir -p nginx
          echo '#!/bin/sh
          set -e
          
          # Run nginx
          exec nginx -g "daemon off;"' > nginx/docker-entrypoint.sh
          chmod +x nginx/docker-entrypoint.sh
          
          # Create simple Nginx Dockerfile
          cat > nginx/Dockerfile << EOF
          FROM nginx:stable-alpine
          
          COPY docker-entrypoint.sh /
          
          ENTRYPOINT ["/docker-entrypoint.sh"]
          EOF
          
          # Create backup directory and scripts
          mkdir -p backup/scripts
          echo '#!/bin/bash
          set -e
          
          echo "Running backup..."
          # Add your backup logic here
          
          # Example backup command
          mysqldump -h$MYSQL_HOST -u$MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE > /backup/source/db_backup.sql
          
          # Example creating a borg backup archive
          borg create --stats --compression lz4 /backup/repo::$(date +%Y-%m-%d_%H-%M-%S) /backup/source
          
          echo "Backup completed successfully!"
          ' > backup/scripts/backup.sh
          chmod +x backup/scripts/backup.sh
          
          # Create backup Dockerfile
          cat > backup/Dockerfile << EOF
          FROM alpine:3.17
          
          RUN apk add --no-cache borgbackup mariadb-client bash
          
          VOLUME ["/backup/repo", "/backup/source"]
          
          CMD ["crond", "-f", "-d", "8"]
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short

      - name: Generate test environment file
        run: |
          cat > .env << EOF
          MYSQL_ROOT_PASSWORD=test_root_password
          MYSQL_PASSWORD=test_db_password
          REDIS_PASSWORD=test_redis_password
          HUMHUB_ADMIN_EMAIL=test@example.com
          HUMHUB_ADMIN_LOGIN=admin
          HUMHUB_ADMIN_PASSWORD=test_admin_password
          HUMHUB_SITE_NAME=HumHub Test
          HUMHUB_SITE_EMAIL=noreply@example.com
          HUMHUB_MAILER_TRANSPORT=php
          BORG_PASSPHRASE=test_borg_password
          EOF
          
          # Create docker-compose.yml if not present
          cp paste-2.txt docker-compose.yml

      - name: Build and export to Docker
        uses: docker/build-push-action@v4
        with:
          context: ./humhub
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}/app:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Nginx image
        uses: docker/build-push-action@v4
        with:
          context: ./nginx
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}/nginx:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Backup image
        uses: docker/build-push-action@v4
        with:
          context: ./backup
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}/backup:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Start Docker Compose for testing
        run: |
          docker-compose up -d
          # Wait for containers to be healthy
          timeout 300 bash -c 'until $(curl --output /dev/null --silent --head --fail http://localhost); do printf "."; sleep 5; done'

      - name: Run Tests
        run: |
          # Basic connectivity test
          curl -k -I https://localhost
          # Check if MariaDB is running
          docker-compose exec -T mariadb mysqladmin -uhumhub -ptest_db_password ping
          # Check if Redis is running
          docker-compose exec -T redis redis-cli -a test_redis_password ping
          # Check HumHub health
          docker-compose exec -T humhub curl -f http://localhost/ping
          # Test backup system
          docker-compose exec -T backup /scripts/backup.sh

      - name: Build and push all images
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v4
        with:
          context: ./humhub
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true') ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Copy files to server
        run: |
          rsync -avz --exclude '.git' --exclude '.github' --exclude 'node_modules' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}

      - name: Deploy on server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Make sure backup and startup scripts are executable
            chmod +x backup/scripts/backup.sh
            chmod +x nginx/docker-entrypoint.sh
            chmod +x humhub/docker-entrypoint.sh
            chmod +x humhub/wait-for-it.sh
            
            # Pull latest images if using prebuilt ones
            # docker-compose pull
            
            # Backup before update
            docker-compose exec -T backup /scripts/backup.sh
            
            # Update the stack
            docker-compose down
            docker-compose up -d
            
            # Verify deployment
            sleep 30
            curl -k -I https://localhost

      - name: Send notification
        uses: rtCamp/action-slack-notify@v2
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: HumHub Deployment
          SLACK_MESSAGE: "Deployment to production ${{ job.status }}"
          SLACK_FOOTER: "GitHub Actions"
